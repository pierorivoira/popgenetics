read.plot.first.migration.parameter = function()
{
library(openxlsx)

file_name = readline(prompt='Please enter file name: ')
extension = readline(prompt='Please enter file extension: ')
parameter = readline(prompt='Please enter parameter (γ=ΘM or M=m/μ): ')
nloci = as.numeric(readline(prompt='Please enter the number of loci: '))
nbins = as.numeric(readline(prompt='Please enter the number of bins of the posterior distribution: '))
npopulations = as.numeric(readline(prompt='Please enter the number of populations: '))
background = readline(prompt='Please enter background color: ')
foreground = readline(prompt='Please enter foreground color: ')
axis_color = readline(prompt='Please enter axis color: ')
graph_color = readline(prompt='Please enter graph color: ')
labes_color = readline(prompt='Please enter labels color: ')
max_y_limit = readline(prompt='Please enter the upper limit of the y axis: ')
line_width = readline(prompt='Please enter the line width of the graph: ')
max_y_limit = as.numeric(max_y_limit)
line_width = as.numeric(line_width)
nparameters = npopulations^2
skipraws = nparameters+14
firstrawdata = skipraws+1
# la prima riga dell’area contenente i dati è firstrawdata 
# la prima riga dell’area contenente il parametro 4 (locus 15) è 193653
# quante righe devo saltare per arrivare lì?
skipraws=skipraws+(nloci*nparameters*(nbins+1))+3*(nbins+1)
firstrawpar4=skipraws+1
lastrawpar4=firstrawpar4+(nbins-1)

rows = as.numeric(c(firstrawpar4:lastrawpar4))
cols = c(5,6)

setwd('~/popgenetics/data')
working_dir = getwd()
path = paste(working_dir, file_name, sep='/')
path = paste(path, '.', extension, sep='')
first.migration.parameter=read.xlsx(xlsxFile=path,sheet = 1,rows=rows,cols=cols,colNames = FALSE)

paramfirst_microsat = first.migration.parameter$X1
countfirst_microsat = first.migration.parameter$X2

par(bg=background, fg = foreground, col.axis = axis_color, col.lab = labes_color)

if (parameter == 'M')

plot(paramfirst_microsat,countfirst_microsat,type='l',lwd=line_width,col=graph_color,xlab='M = m/μ',ylab='posterior density',cex.lab=2,cex.axis=2,ylim=c(0,max_y_limit))

else plot(paramfirst_microsat,countfirst_microsat,type='l',lwd=line_width,col=graph_color,xlab='γ=ΘM=xNeμ*m/μ=xNem',ylab='posterior density',cex.lab=2,cex.axis=2,ylim=c(0,max_y_limit))

mode = paramfirst_microsat[which(countfirst_microsat == max(countfirst_microsat))]
result = str(first.migration.parameter)

return(parameter)
return(result)
return(mode)

print(paste('The kind of the first migration parameter is', parameter))
print(paste('The structure of the first migration parameter is', result))
print(paste('The mode of the distribution is', mode))

}
